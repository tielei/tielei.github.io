---
layout: post
category: "other"
title: "一个错别字100块钱？"
date: 2018-03-14 00:00:01 +0800
published: true
---

有一次，跟Vito在微信上聊天。聊着聊着，突然，毫无征兆地，他发过来一个红包。点开一看，哇！100块！问他怎么回事，原来是他发的上一条消息里有一个错别字。Vito定的规则，一个错别字100，所以，要给我发一个红包。

<!--more-->

估计有些同学已经把眼睛瞪得老大了。还有这么好的事啊！跟Vito聊天还有钱赚？你错了。其实Vito是个很严谨的人，每条微信消息发出去之前都要自己先check两遍。我敢打赌，你要是跟Vito聊天，非赔不可（前提是你也遵守同样的规则）。

打错了字，不但可能会造成别人的理解障碍，给收消息的人带来不便，有时候还会产生很尴尬的效果。

记得去年年底的时候，公司群里大家都在发祝福的话，每个人都在排着队说「大吉大利！」我当时正好在外面，北京的天气那会还比较冷。我掏出手机，在瑟瑟寒风中敲入了这四个字。使用iPhone手机的同学应该知道，在手机的输入键盘上，叹号和问号是挨在一起的，很容易弄混。结果手一抖，最后竟然把叹号误写成了问号，变成了「大吉大利？」真是尴尬得要死[捂脸]

我们平常在用微信聊天或者发邮件的时候，有一些极易犯的错误。下面举一些在互联网公司里经常出现的例子：

* 把「客户端」写成「客户单」；
* 把「前端」写成「前段」；（前端同学得受多大伤害）
* 到底是「登录」还是「登陆」？（估计每家互联网公司都同时存在这两种写法）
* 英文的大小写问题：iOS写成ios；Android写成android；MySQL这个词估计没有几个人能完全写对。关键是，这些拼写错误如果出现在个人简历中或者一些公司的招聘启事中，就会给人一种很不严谨的暗示。

大家都知道，微信消息有一个「撤回」功能，允许用户把发错的消息收回来。在几年前这个功能刚刚推出的时候，晓睿同学就说，这是个反人类的功能。说出去的话就像泼出去的水，所谓覆水难收，在现实当中它是撤不回来的。后来，经过多次体验才发现——这确实是个反人类的功能。特别是当你从通知里看到一条消息，点进去却发现已经没有了的时候。所以建议微信这功能尽量别用，用顺手了就特别容易养成出错的毛病。

现在一些技术社区中出现了一种不好的情况：有些技术文章的错别字简直惨不忍睹。而且有时候这样的文章还能上热门，也真是匪夷所思了。我们在印象中也许会觉得程序员是一种非常严谨的生物，写出来的文章就像代码一样能够编译通过。但恰恰相反，反而是文学性质的文章没有那么多错别字。也许是因为，一篇本来优美的文章，一旦出现错别字，太影响美感吧。美感本身就是这些文章不能剥离的一部分。

一篇严谨的文字，作者的投入总是超出预期的。第一遍写完，需要校对一遍；校对过程中产生了修改，发现又得重新校对一遍；再校对的过程中，难免又觉得哪里需要改改……如此往复，一直到改无可改，一篇文章才会出炉。

可能有些人听说过，《The Art of Computer Programming》一书的作者高德纳，提供了一项奖金：凡是在他的书中找到一处错误的人，不管是技术错误，还是文字或印刷错误，他都会奖励2.56美金。大师尚且如此，我们就写个博客，为啥就不能让错别字少一点呢？

那么怎样做才能保证持续不出错呢？说实话，这非常难。严谨如Vito也会出错。下面是一些小技巧：

* 打好的微信文字消息，总是先读一遍再点发送。永远不要有例外。
* 在某些需要填写证件号或手机号的场合，填完至少检查三遍。
* 起草重要的邮件时，在内容输入完成之前，先别添加收件人地址，防止在输入过程中不小心触发了发送的快捷键，导致把未完成的邮件发送出去。
* ......

初看这些做法，似乎有点矫枉过正。但是你一旦决定认真起来，你就会做得越来越好。你会注意到生活中的很多细节：字母应该是大写还是小写；标点符号是半角还是全角；应该用英文括号还是中文括号；哪里有空格哪里没有......然后，你写起代码来也丝毫不会含糊，写Javadoc也会非常精确；如果你在编写面向第三方的平台文档，更不会搞得错字连篇，贻笑大方。

每个人都会犯错，只是有些人对自己极度宽容，而另一些人则甘心为自己的错误买单。己所不欲，勿施于人。当我们在读到一些漏洞百出的技术文档、博客或者文章时，除了在心里默默吐槽之外，我们也明白了一个道理：当我们有一天成为作者的时候，应该做一个负责任的作者。


（完）

**其它精选文章**：

* [漫谈分布式系统、拜占庭将军问题与区块链](https://mp.weixin.qq.com/s?__biz=MzA4NTg1MjM0Mg==&mid=2657261626&idx=1&sn=6b32cc7a7a62bee303a8d1c4952d9031&chksm=844791e3b33018f595efabf6edbaa257dc6c5f7fe705e417b6fb7ac81cd94e48d384a694640f#rd)
* [基于Redis的分布式锁到底安全吗（下）](https://mp.weixin.qq.com/s?__biz=MzA4NTg1MjM0Mg==&mid=2657261521&idx=1&sn=7bbb80c8fe4f9dff7cd6a8883cc8fc0a&chksm=84479e08b330171e89732ec1460258a85afe73299c263fcc7df3c77cbeac0573ad7211902649#rd)
* [Redis为什么用跳表而不用平衡树？](https://mp.weixin.qq.com/s?__biz=MzA4NTg1MjM0Mg==&mid=2657261425&idx=1&sn=d840079ea35875a8c8e02d9b3e44cf95#rd)
* [为什么未来是增强现实的？](https://mp.weixin.qq.com/s?__biz=MzA4NTg1MjM0Mg==&mid=2657261622&idx=1&sn=a917c7124f087ec4ea20cc1434c6ab06&chksm=844791efb33018f915ff50a3583628ba8469ea67824c9b3f877d7407411454c2bafa8fa2e4b7#rd)
* [三个字节的历险](https://mp.weixin.qq.com/s?__biz=MzA4NTg1MjM0Mg==&mid=2657261541&idx=1&sn=2f1ea200389d82e7340a5b4103968d7f&chksm=84479e3cb330172a6b2285d4199822143ad05ef8e8c878b98d4ee4f857664c3d15f54e0aab50#rd)
* [做技术的五比一原则](https://mp.weixin.qq.com/s?__biz=MzA4NTg1MjM0Mg==&amp;mid=2657261555&amp;idx=1&amp;sn=3662a2635ecf6f67185abfd697b1057c&amp;chksm=84479e2ab330173cebe16826942b034daec79ded13ee4c03003d7bef262d4969ef0ffb1a0cfb#rd)
* [知识的三个层次](https://mp.weixin.qq.com/s?__biz=MzA4NTg1MjM0Mg==&mid=2657261491&idx=1&sn=cff9bcc4d4cc8c5e642309f7ac1dd5b3&chksm=84479e6ab330177c51bbf8178edc0a6f0a1d56bbeb997ab1cf07d5489336aa59748dea1b3bbc#rd)
* [技术的正宗与野路子](https://mp.weixin.qq.com/s?__biz=MzA4NTg1MjM0Mg==&mid=2657261357&idx=1&sn=ebb11a1623e00ca8e6ad55c9ad6b2547#rd)
