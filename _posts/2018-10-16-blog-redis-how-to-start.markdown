---
layout: post
category: "server"
title: "Redis源码从哪里读起？"
date: 2018-10-16 00:00:00 +0800
published: true
---

自从我写了[Redis内部数据结构详解](https://mp.weixin.qq.com/s/3TU9qxHJyxHJgVDaYXoluA)的一系列文章之后，有不少读者前来阅读和讨论。其中也有不少人问起阅读Redis源码的方法。正所谓「授人以鱼不如授人以渔」，本文就集中讲一讲这样一个话题：如果你现在想阅读Redis源码，那么从哪里入手？

<!--more-->

Redis是用C语言实现的，首先，你当然应该从main函数开始读起。但我们在读的时候应该抓住一条主线，也就是当我们向Redis输入一条命令的时候，代码是如何一步步执行的。这样我们就可以先从外部观察，尝试执行一些命令，在了解了这些命令执行的外部表现之后，再钻进去看对应的源码是如何实现的。要想读懂这些代码，首先我们需要理解Redis的事件机制。而且，一旦理解了Redis的事件循环(Event Loop)的机制，我们还会搞明白一个有趣的问题：为什么Redis是单线程执行却能同时处理多个请求？

从main函数开始，沿着代码执行路径，实际上我们可以一直追下去。但为了让本文不至于太过冗长，我们还是限定一下范围。本文的目标就定为：引领读者从main函数开始，一步步追踪下去，最终到达任一Redis命令的执行入口。这样接下来就可以与[Redis内部数据结构详解](https://mp.weixin.qq.com/s/3TU9qxHJyxHJgVDaYXoluA)的一系列文章衔接上了。或者，你也可以自己去完成剩下的探索了。

为了表述清楚，本文按照如下思路进行：
1. 先概括地介绍整个代码初始化流程（从main函数开始）；
2. 再概括地介绍对于Redis命令请求的处理流程；
3. 重点介绍事件循环机制；
4. 对于前面介绍的各个代码处理流程，给出详细的代码调用关系，方便随时查阅；
5. 对重点代码片段进行解析。

根据这样几部分的划分，如果你只想粗读大致的处理流程，那么只需要阅读前两个部分就可以了。而后面三部分则会深入到某些值得关注的细节。

注：本文的分析基于Redis源码的4.0分支。

### 初始化流程概述

Redis源码的main函数在源文件server.c中。main函数开始执行后的逻辑可以分为两个阶段：
* 各种初始化（包括事件循环的初始化）；
* 执行事件循环。

这两个执行阶段可以用下面的流程图来表达（点击看大图）：

[<img src="/assets/photos_redis/how-to-start/main_start_event_loop.png" style="width:400px" alt="初始化和事件循环流程图" />](/assets/photos_redis/how-to-start/main_start_event_loop.png)

首先，我们看一下初始化阶段中的各个步骤：
* **配置加载和初始化**。这一步表示Redis服务器各种参数的初始化。在Redis源码中，Redis服务器是用一个叫做redisServer的struct来表达的，里面定义了Redis服务器赖以运行的各种参数，比如监听的端口号和文件描述符、当前连接的各个client端、Redis命令表(command table)配置、持久化相关的各种参数，等等，以及后面马上会讨论的事件循环结构。Redis服务器在运行时就是由一个redisServer类型的全局变量来表示的（变量名叫server），这一步的初始化主要就是对于这个全局变量进行初始化。在整个初始化过程中，有一个需要特别关注的函数：populateCommandTable。它初始化了Redis命令表，通过它可以由任意一个Redis命令的名字查找该命令的配置信息（比如该命令接收的命令参数个数、执行函数入口等）。在本文的第二部分，我们会看到如何从接收一个Redis命令的请求开始，一步步执行到来查阅这个命令表，从而找到该命令的执行入口。另外，这一步中还有一个值得一提的地方：在对全局的redisServer结构进行了初始化之后，还需要从配置文件（redis.conf）中加载配置。这个过程可能覆盖掉之前初始化过的redisServer结构中的某些参数。
* **创建事件循环**。在Redis中，事件循环是用一个叫aeEventLoop的struct来表示的。「创建事件循环」这一步主要就是创建一个aeEventLoop结构，并存储到server全局变量中。另外，事件循环的执行依赖系统底层的IO多路复用机制(IO multiplexing)，比如Linux系统上的[epoll机制](https://man.cx/epoll){:target="_blank"}。因此，这一步也包含对于底层IO多路复用机制的初始化（调用系统API）。
* **开始socket监听**。

初始化其实要完成很多事，我们关注点在哪，因此简单，但重点要突出。

单线程。